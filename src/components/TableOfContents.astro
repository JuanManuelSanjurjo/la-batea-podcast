---
import type { MarkdownHeading } from 'astro';

const { headings } = Astro.props;
const grouppedHeadings = headings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] });
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading);
  }
  return array;
}, []);
---

<nav id="table-of-contents" aria-label="Table Of Contents">
  {grouppedHeadings.length > 0 && <h5>Tabla de Contenidos</h5>}

  <ul class="headings">
    {
      grouppedHeadings.map((h) => (
        <li>
          <a href={`#${h.slug}`}>{h.text}</a>
          {h.subheadings.length > 0 && (
            <ul class="subheadings">
              {h.subheadings.map((sub) => (
                <li>
                  <a href={`#${sub.slug}`}>{sub.text}</a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
</nav>

<script is:inline>
  // This script tag is useful only if you want to display the TOC alongside the blog post...
  // ... and highlight the section that the user is currently reading through.
  // Feel free to remove this tag if you don't need this type of functionality.

  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        const headingFragment = `#${entry.target.id}`;
        const tocItem = document.querySelector(`a[href="${headingFragment}"]`);

        if (entry.isIntersecting) {
          const previouslyActivatedItem =
            document.querySelector('.active-toc-item');

          previouslyActivatedItem?.classList.remove('active-toc-item');
          tocItem.classList.add('active-toc-item');
        } else {
          const isAnyOtherEntryIntersecting = entries.some(
            (e) => e.target.id !== entry.target.id && e.isIntersecting
          );

          if (isAnyOtherEntryIntersecting) {
            tocItem.classList.remove('active-toc-item');
          }
        }
      }
    },
    { root: null, rootMargin: '0px', threshold: [1] }
  );

  const sectionHeadings = document.querySelectorAll(
    'article > h2, article > h3'
  );

  for (const heading of sectionHeadings) {
    observer.observe(heading);
  }
</script>
<script>
    // JavaScript para manejar el clic y aplicar la clase activa
    // document.addEventListener('DOMContentLoaded', () => {
    document.addEventListener('astro:page-load', () => {
        const tocLinks = document.querySelectorAll('#table-of-contents a');

        tocLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                // Elimina la clase 'active-toc-item' de todos los enlaces
                tocLinks.forEach(link => link.classList.remove('active-toc-item'));

                // Agrega la clase al enlace cliqueado
                event.currentTarget.classList.add('active-toc-item');
            });
        });
    });
</script>
<style>
    #table-of-contents{
      background-color: var(--accent-darker);
      position: fixed;
      top: 90px;
      left:10px;
      width: 300px;
      max-height: 90vh;
      padding: 0 20px;
      font-size: 0.8em;
      overflow-y: auto;
      border-radius: 12px;
      letter-spacing: 0.5px;
    }
    .headings {
      /* font-weight: bold; */
    }
    .subheadings {
      padding-left: 1em;
      font-weight: 200 ;
      border-left: 2px solid var(--accent);
    }
    .active-toc-item, a:hover{
      color: var(--accent)
    }
    a{
      color: rgb(var(--gray-light));
      text-decoration: none;
    }
    h5{
      position: sticky;
      top:0;
      background-color: var(--accent-darker);
      width: 90%;
      padding: 10px;
      border-bottom: 2px solid var(--accent);
    }
    @media (max-width: 1450px){
      #table-of-contents{
        /* display:none; */
        position: static;
        max-height: max-content;
        width: inherit;
      }
    }
</style>
